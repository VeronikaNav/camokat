#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
using namespace std;
//класс товаров из которых создаётся заказ
class Product {
private:
    int _id;
    string _name;
    double _price;
public:
    Product(int id, const string& name, double price) : _id(id), _name(name), _price(price) {}
    Product() = default;
    ~Product() {};

    int getId() const { return _id; }
    string getName() const { return _name; }
    double getPrice() const { return _price; }
    // Операторы ввода и вывода для продукта
    friend istream& operator>>(istream& in, Product& p) {
        string q;
        in >> p._id;
        in>> p._name;
        in>> p._price;
        return in;
    }
    friend ostream& operator<<(ostream& out, const Product& p) {
        out  << p._id << " " << p._name << " " << p._price;
        return out;
    }
};
//функция считывания из файла
template <typename T>
void ReadFile(const string& filename, vector<T>& ar) {
    ifstream in(filename);
    if (!in.is_open())
        return;
    int n;
    in >> n;
    ar.resize(n);
    if (n != 0) {
        for (int i = 0;i < n;i++) {
            in >> ar[i];
        }
    }
    in.close();
}
//функция записи в файл
template <typename T>
void writefile(const string& filename, vector<T>& ar) {
    ofstream out(filename);
    if (!out.is_open())
        return;
    out << ar.size() << endl;
    for (const auto& i : ar) {
        out << i << endl;
    }
    out.close();
}
//функция показывающая все доступные товары
void showProduct() {
    vector<Product> products;
    ReadFile("Product.txt", products);
        cout << "\n=== list ===\n";
        for (const auto& product : products) {
            cout << "  id " << product.getId() << ":\n";
            cout << "  name:" << product.getName() << endl;
            cout << "  price:" << product.getPrice() <<"\n"<< endl;
            
        }
    
}
//функция добавления товаров
void addProduct() {
    vector<Product> products;
    ReadFile("Product.txt", products);
    Product newProduct;
    cout << "vvedite: id, name i price tovara" << endl;
    cin >> newProduct;
    products.push_back(newProduct);
    writefile("Product.txt", products);
    cout << "kaif!\n\n";
}
class Order {
private:
    int _id;
    int _x, _y;
    vector<Product>products;

public:
    Order(int id, int x, int y) : _id(id), _x(x), _y(y) {}
    Order() = default;
    ~Order() {}
    int getX() const { return _x; }
    int getY()const { return _y; }
    // Сеттеры
    void setId(int id) { _id = id; }
    void setX(int x) { _x = x; }
    void setY(int y) { _y = y; }
    // Перегрузка оператора ввода
    friend istream& operator>>(istream& in, Order& p) {
        size_t kp;
        in >> p._id;
        in >> p._x >> p._y;
        in>> kp;
        p.products.clear();
        p.products.resize(kp);
        for (size_t i = 0;i < kp;i++) {
            in >> p.products[i];
        }
        return in;
    }
    friend ostream& operator<<(ostream& out, const Order& p) {
        out << p._id << " " << p._x << " " << p._y << " " << p.products.size(); // Основные данные заказа
        // Затем продукты. Формат вывода каждого продукта должен быть совместим с Product::operator>>
        // Если Product::operator>> читает продукт и останавливается (например, на \n),
        // то после основных данных заказа нужен \n, и после каждого продукта \n.
        out << endl;
        for (const auto& product : p.products) {
            out << product << endl; // Предполагаем, что Product::operator<< пишет продукт и завершает строкой
        }
        return out;
    }
    void adProduct(const Product& product) {
        products.push_back(product);
    }
};
//функция добавления заказа на определённый склад
void addOrder() {
    int idd, x, y;
    vector<Order>orders;
    vector<Storage>stor;
    ReadFile("Order.txt", orders);
    int q;
    cout << "viberite sklad(id)" << endl;
    showStorage();
    cin >> q;
    ReadFile("Storage.txt", stor);
    auto it = find_if(stor.begin(), stor.end(), [q](const Storage& s) { return s.getId() == q; });

    if (it != stor.end()) {

        Order newOrder;
        cout << "Enter the Order ID: ";
        cin >> idd;
        newOrder.setId(idd);
        cout << "Enter the Order coordinates (x y): ";
        cin >> x >> y;
        newOrder.setX(x);
        newOrder.setY(y);
        showProduct();
        vector<Product>product;
        ReadFile("Product.txt", product);
        int id;
        while (1) {
            cout << "select a product from the list and enter its id(exit-0:) ";
            cin >> id;
            if (id == 0)
                break;
            for (const auto& i : product) {
                if (id == i.getId())
                    newOrder.adProduct(i);
            }
        }
        it->adQueue(newOrder); // Добавляем курьера в склад
        orders.push_back(newOrder);
        writefile("Order.txt", orders);
        cout << "The courier has been successfully added!" << endl;
        writefile("Storage.txt", stor);
    }
    else {
        cout << "Storage with ID " << q << " not found." << endl;
    }
}
//функция проверки наличия файла и создания его если его небыло до этого
void files(const string& filename) {
    int n = 0;
    ifstream in(filename);
    if (!in.is_open()) {
        ofstream out(filename);
        if (!out.is_open())
            return;
        out << n << endl;
        out.close();
    }
    else
    {
        in.close();
    }
}
//класс курьеров
class Curier {
private:
    int _id;
    int _x, _y;
    int _statex, _statey;
    int _speed;
    string _state;
    Order _ord;
    
public:
    Curier(int id, int x, int y,int statex,int statey,int speed,string state, Order ord) : _id(id), _x(x), _y(y),_statex(statex),_statey(statey),_speed(speed),_state(state), _ord(ord) {}
    Curier() = default;
    ~Curier() {}
    

    // Геттеры
    int getX() const { return _x; }
    int getY() const { return _y; }
    int getId() const { return _id; }

    int getXs() const { return _statex; }
    int getYs() const { return _statey; }
    std::string getState() const { return _state; }
    Order getOrd() const { return _ord; }
    int getSpeed() const { return _speed; }

    // Сеттеры
    void setId(int id) { _id = id; }
    void setX(int x) { _x = x; }
    void setY(int y) { _y = y; }
    void setSX(int statex) { _statex = statex; }
    void setSY(int statey) { _statey = statey; }
    void setSpeed(int speed) { _speed = speed; }
    void setState(const std::string& state) { _state = state; }
    void setOrd(const Order& ord) { _ord = ord; }
    friend istream& operator>>(istream& in, Curier& p) {
        in >> p._id;
        in >> p._x >> p._y;
        in>>p._statex >> p._statey;
        in >> p._speed;
        in >> p._state;
        in>> p._ord;
        return in;
    }
    friend ostream& operator<<(ostream & out, const Curier& p) {
            out << p._id << " " << p._x << " " << p._y<<" "<<p._statex<<" "<<p._statey<<" " << p._speed << " " << p._state << " " << p._ord;
            return out;
     }
    
};
//функция удаления курьера
void removeCurier() {
    cout << "print storage id" << endl;
    int id;
    cin >> id;
    vector<Storage>storages;
    ReadFile("Storage.txt", storages);
    for (auto& stor : storages) {
        if (id == stor.getId()) {
            cout << "print id curier" << endl;
            int idc;
            cin >> idc;
            vector<Curier>cu;
            cu = stor.getCur();
            auto it = std::remove_if(cu.begin(), cu.end(), [idc](const Curier& kur) {return kur.getId() == idc; });
            if (it != cu.end()) {
                cu.erase(it, cu.end()); // Удаляем найденных курьеров
                cout << "Curier with id " << idc << " removed." << endl;
            }
            else {
                cout << "Curier with id " << idc << " not found." << endl;
            }
            stor.setCur(cu);
           
        }
        else {
            cout << "Warehome with id " << id << " not found." << endl;
        }
    }
    writefile("Storage.txt", storages);

}
//функция добавления курьера на определённый склад
void addCurier() {
    int _id;
    int _x, _y;
    float _speed;
    vector<Storage>stor;
    vector<Curier>curi;
    int q;
    cout << "viberite sklad(id)" << endl;
    showStorage();
    cin >> q;      
    ReadFile("Storage.txt", stor);
    auto it = find_if(stor.begin(), stor.end(), [q](const Storage& s) { return s.getId() == q; });

    if (it != stor.end()) {
            Curier newCurier; // Создаем нового курьера
            cout << "Enter the courier's details:" << endl;
            cin >> _id;
            _x = it->getX();
            _y = it->getY();
            cin >> _speed;
            newCurier.setId(_id);
            newCurier.setX(_x);
            newCurier.setY(_y);
            newCurier.setSX(_x);
            newCurier.setSY(_y);
            newCurier.setSpeed(_speed);
            newCurier.setState("free");

            it->adCurier(newCurier); // Добавляем курьера в склад
            curi.push_back(newCurier); // Сохраняем курьера в общий список
            cout << "The courier has been successfully added!" << endl;
            writefile("Storage.txt", stor);
            
        }
        else {
            cout << "Склад с id " << q << " не найден." << endl;
        }
   
}


class Storage  {
private:
    int _id;
    int _x, _y;
    vector<Order>queue;
    vector<Curier>cur;
public:
    Storage(int id, int x, int y): _id(id),_x(x),_y(y){}
    Storage() = default;

    friend istream& operator>>(istream& in, Storage& p) {
        size_t ko;
        size_t kc;
        in >> p._id;
        in>> p._x >> p._y >> ko>>kc;

        p.queue.clear();
        p.queue.resize(ko);
        for (size_t i = 0;i < ko;i++) {
            in >> p.queue[i];
        }
        p.cur.clear();
        p.cur.resize(kc);
        for (size_t i = 0;i < kc;i++) {
            in >> p.cur[i];
        }

        return in;
    }
    friend ostream& operator<<(ostream& out, const Storage& p) {
        out << " " << p._id << " " << p._x << " " << p._y << " " << p.queue.size() <<" "<< p.cur.size() << endl;
        for (const auto& order : p.queue) {
            out << order << endl;
        }
        for (const auto& curier : p.cur) {
            out << curier << endl;
        }
        return out;
    }
    // Сеттеры
    
    void setId(int id) { _id = id; }
    void setX(int x) { _x = x; }
    void setY(int y) { _y = y; }
    void setCur(const vector<Curier>& curiers) {cur = curiers;}

    // Методы доступа
    int getId() const { return _id; }
    int getX() const { return _x; }
    int getY() const { return _y; }
    const std::vector<Curier>& getCur() const {return cur;}
    const std::vector<Order>& getOrd() const { return queue; }

   

    void adQueue(const Order& order) {
        queue.push_back(order);
    }
    // Методы для работы с курьерами
    void adCurier(const Curier& curier) {
        cur.push_back(curier);
    }
    void removeOrd() {   
        if (!queue.empty()) { // Проверяем, что вектор не пуст
            queue.erase(queue.begin()); // Удаляем первый элемент
        }
    }
};
//функция передвижения курьера и промотки времени
void updatePosition() {
    unsigned int time;
    int x, y;
    string st;
    cout << "vvedite vremia" << endl;
    cin >> time;
    vector<Storage>storages;
    ReadFile("Storage.txt", storages);
    for ( auto& stor : storages) {
        vector<Curier>cu;
        
        Order o;
        cu = stor.getCur();
        
        
        for ( auto& kur : cu) {
            for (int i = 0;i < time;i++) {
                if (kur.getState() == "delivers") {
                    o = kur.getOrd();
                    if (kur.getX() < o.getX()) {
                        x = kur.getX();
                        x += (kur.getSpeed());
                        kur.setX(x);
                    }

                    if (kur.getY() < o.getY()) {
                        y = kur.getY();
                        y += (kur.getSpeed());
                        kur.setY(y);
                    }
                    if (kur.getX() >= o.getX() && kur.getY() >= o.getY()) {
                        st = "is_returning";
                        kur.setOrd(Order());
                        kur.setState(st);
                    }
                }
                else if (kur.getState() == "is_returning") {
                    if (kur.getX() > kur.getXs()) {
                        x = kur.getX();
                        x -= (kur.getSpeed());
                        kur.setX(x);
                    }

                    if (kur.getY() > kur.getYs()) {
                        y = kur.getY();
                        y -= (kur.getSpeed());
                        kur.setY(y);
                    }
                    if (kur.getX() <= kur.getXs() && kur.getY() <= kur.getYs()) {
                        st = "free";
                        kur.setX(kur.getXs());
                        kur.setY(kur.getYs());
                        kur.setState(st);
                    }

                }
                else if (kur.getState() == "free") {
                    kur.setState("delivers");
                    if (!stor.getOrd().empty()) {
                        kur.setOrd(stor.getOrd()[0]);
                        stor.removeOrd();
                        i--;
                    }
                }
                   
            }
            stor.setCur(cu);
        }
    }
    
    writefile("Storage.txt", storages);
}
// Функция для добавления объекта home в вектор
void addStorage() {
    int id, x, y;
    vector<Storage>storages;
    ReadFile("Storage.txt", storages);
    Storage newStorage;
    cout << "Enter the Order ID: ";
    cin >> id;
    newStorage.setId(id);
    cout << "Enter the Order coordinates (x y): ";
    cin >> x >> y;
    newStorage.setX(x);
    newStorage.setY(y);
    
    storages.push_back(newStorage); // Добавляем новый дом в вектор
    writefile("Storage.txt", storages);
    cout << "kaif!\n\n";
}
//функция показывающая все склады
void showStorage() {
    vector<Storage>storages;
    ReadFile("Storage.txt", storages);
    for (const auto& storage : storages) {
        cout << storage << endl;
    }
}
//мэйн
int main() {
    int sw = 0;
     files("Storage.txt");
     files("Product.txt");
       
    while (1) {
        cout << "  _____________________________" << endl;
        cout << "|  CHOOSE WHAT YOU WANT TO DO\t|" << endl;
        cout << "|      ADD PRODUCT(enter-1)\t|" << endl;
        cout << "|      ADD STORAGE(enter-2)\t|" << endl;
        cout << "|      SHOW STORAGE(enter-3)\t|" << endl;
        cout << "|       ADD ORDER(enter-4)\t|" << endl;
        cout << "|       ADD CURIER(enter-5)\t|" << endl;
        cout << "|       TIME TRAVEL(enter-6)\t|" << endl;
        cout << "|      REMOVE CURIER(enter-7)\t|" << endl;
        cout << "|          EXIT(enter-0)\t|" << endl;
        cout << "  _____________________________" << endl;

        cin >> sw;
        switch (sw) {
        case 1:
            addProduct();
            break;
        case 2:
            addStorage();
            break;
        case 3:
            showStorage();
            break;
        case 4:
            addOrder();
            break;
        case 5:
            addCurier();
            break;
        case 6:
            updatePosition();
            break;
        case 7:
            removeCurier();
            break;
        case 0:
            cout << "  _________________" << endl;
            cout << "|  TO BE CONTINUE  |" << endl;
            cout << "  _________________" << endl;
            return 0;
            break;
        }
    }
}

